//함수 : 클래스 내부에 있지 않은 함수다. 그래서 main 함수라고 한다
//메서드 : 클래스 내부에 있는 함수를 메서드라고 한다. (주체가 있다. 주체 -> 클래스)

//영역 : static영역, heap영역, stack영역이라는 것이 있고 각각의 메모리 공간이 있다. 메모리에 올라간다는 것은 사용준비가 되었다는 것이다

//static : class 내부에 없는 것은 static영역(해당 영역의 메모리)에 올라간다.(변수 혹은 함수) 새로 new 해줄 필요가 없다. 프로그램이 실행되기 전 한 번만 생성되어 사용준비가 된다.
//사용 준비가 된다는 것은 메모리에 올라가 있다는 것. 가장 생명주기가 길다
//heap : new로 생성할 때 heap영역(메모리)에 올라가서 사용 준비가 된다.  생명주기가 보통이다
//stack : 함수나 메서드가 호출될 때 내부에 있는 변수는 스택 영역(메모리)에 올라간다. 가장 생명주기가 짧다

// class 외부의 변수는 static영역에 올라 간다. 새로 new 해줄 필요가 없다. 모든 인스턴스가 공유하므로 전역 변수 (static 영역) 라고 한다.
// static 이라는 용어는 보통 클래스 내부에서 정의된, 클래스의 모든 인스턴스가 공유하는 변수를 의미하기 때문에 클래스 외부에 선언된 변수는 전역 변수라고 부르는 것이 더 정확.
// 프로그래밍에서 "static"이라는 용어는 클래스 내부의 static 변수를 지칭할 때 사용되는 것이 관례이므로, 클래스 외부에서 선언된 변수는 전역 변수라고 부르는 것이 더 적절
// 프로그램 실행될 때 한 번만 생성된다.
// import만 하면 어디에서든 사용할 수 있다.
// 가능한 사용하지 않는 것이 좋다. 충돌 날 수 있으므로.
String name = "Hello World";

//메서드가 아니라 함수다.(기능을 가지는 것 -> 상태를 바꾸는 것이 아니다.)
//class 외부에 있기 때문에 전역 static이다.
void hello() {
  // hello()가 호출될 때 사용 준비가 되는 것으로 stack영역에 올라간다.
  // hello()가 static인 것은 hello()만 프로그램 실행 전에 사용준비가 되는 것이고
  // 그 내부에 있는 것들은 hello()가 호출될 때 stack에 올라가는 것이다.
  int num = 10;
  print(num);
}

// 클래스는 객체가 생성될 때 heap
class Animal {
  int id = 1;
  int num = 5;

  // 클래스 static 변수-> new 해줄 필요 없이 클래스 이름 찍고 접근  Animal.name
  // 클래스 내부의 static 변수는 클래스에 속하며, 인스턴스가 아닌 클래스 자체에서 공유되므로 모든 인스턴스가 동일한 값을 공유
  // 이때 static 키워드를 사용하여 명시적으로 선언해야 한다.
  // 프로그램 실행될 때 한 번만 생성된다.
  // import만 하면 어디에서든 사용할 수 있다.
  static String name = "강아지";

  void speak() {
    // 메서드 (상태 변경할 때 사용. 상태란 멤버변수를 일컫는다)
    num = 1;
  }
}

void main() {
  print(name); // Hello World
  print(Animal.name); // 강아지

  //동물 객체 생성. java처럼 new를 안 붙여도 된다. new 생략 가능
  Animal a = Animal();
  a.speak(); // 강아지
  print(a.num); // 1
  hello(); // 10
}
